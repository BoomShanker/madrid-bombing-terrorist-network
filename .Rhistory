?cars
plot(cars, xlab = "Speed (mph)"), ylab = "Stopping distance (ft)", las = 1, xlim = c(0,25))
library(ggplot)
install.packages(tidyverse)
getwd()
demo()
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages("igraph")
# Load tidyvers
library(tidyverse)
# Load igraph
library(igraph)
# Create the friends1_edges tibble
name1_25 <- c("Joe", "Joe", "Joe", "Erin", "Kelley", "Ronald", "Ronald", "Ronald",
"Michael", "Michael", "Michael", "Valentine", "Troy", "Troy", "Jasmine", "Jasmine",
"Juan", "Carey", "Frankie", "Frankie", "Michael", "Michael", "Keith", "Keith", "Gregory")
name2_25 <- c("Ronald", "Michael", "Troy", "Kelley", "Valentine", "Troy", "Perry", "Jasmine", "Troy",
"Jasmine", "Juan", "Perry", "Jasmine", "Juan", "Juan", "Carey", "Demetrius", "Frankie",
"Michael", "Merle", "Merle", "Alex", "Gregory", "Marion", "Marion")
hours_25 <- c(1, 3, 2, 3, 5, 1, 3, 5, 2, 1, 3, 5, 3, 2, 6, 1, 2, 2, 1, 1, 2, 1, 1, 3, 2)
# Rename columns to match prev ex
friends1_edges <- tibble(name1 = name1_25, name2 = name2_25, hours = hours_25)
# Create the friends1_nodes tibble
name <- c("Joe", "Erin", "Kelley", "Ronald", "Michael", "Valentine", "Troy", "Jasmine",
"Juan", "Carey", "Frankie", "Keith", "Gregory", "Perry", "Demetrius",
"Merle", "Alex", "Marion")
gender <- c("M", "F", "F", "M", "M", "F", "M", "F", "M", "F", "M", "M", "M", "M",
"M", "M", "F", "F")
friends1_nodes <- tibble(name, gender)
# Create an igraph object with attributes directly from dataframes
g1 <- graph_from_data_frame(d = friends1_edges, vertices = friends1_nodes, directed = FALSE)
# Subset edges greater than or equal to 5 hours
E(g1)[[hours >= 5]]
# Set vertex color by gender
# "orange" for females and "dodgerblue" for males
V(g1)$color <- ifelse(V(g1)$gender == "F", "orange", "dodgerblue")
# Plot the graph
plot(g1, vertex.label.color = "black")
# Plot the graph object g1 in a circle layout
plot(g1, vertex.label.color = "black", layout = layout_in_circle(g1))
# Plot the graph object g1 in a Fruchterman-Reingold layout
plot(g1, vertex.label.color = "black", layout = layout_with_fr(g1))
# Create an igraph object with attributes directly from dataframes
g1 <- graph_from_data_frame(d = friends1_edges, vertices = friends1_nodes, directed = FALSE)
# Rename columns to match prev ex
friends1_edges <- tibble(name1 = name1_25, name2 = name2_25, hours = hours_25)
# Load tidyvers
library(tidyverse)
install.packages("tidyverse")
# Load tidyvers
library(tidyverse)
# Load igraph
library(igraph)
# Create the friends1_edges tibble
name1_25 <- c("Joe", "Joe", "Joe", "Erin", "Kelley", "Ronald", "Ronald", "Ronald",
"Michael", "Michael", "Michael", "Valentine", "Troy", "Troy", "Jasmine", "Jasmine",
"Juan", "Carey", "Frankie", "Frankie", "Michael", "Michael", "Keith", "Keith", "Gregory")
name2_25 <- c("Ronald", "Michael", "Troy", "Kelley", "Valentine", "Troy", "Perry", "Jasmine", "Troy",
"Jasmine", "Juan", "Perry", "Jasmine", "Juan", "Juan", "Carey", "Demetrius", "Frankie",
"Michael", "Merle", "Merle", "Alex", "Gregory", "Marion", "Marion")
hours_25 <- c(1, 3, 2, 3, 5, 1, 3, 5, 2, 1, 3, 5, 3, 2, 6, 1, 2, 2, 1, 1, 2, 1, 1, 3, 2)
# Rename columns to match prev ex
friends1_edges <- tibble(name1 = name1_25, name2 = name2_25, hours = hours_25)
# Create the friends1_nodes tibble
name <- c("Joe", "Erin", "Kelley", "Ronald", "Michael", "Valentine", "Troy", "Jasmine",
"Juan", "Carey", "Frankie", "Keith", "Gregory", "Perry", "Demetrius",
"Merle", "Alex", "Marion")
gender <- c("M", "F", "F", "M", "M", "F", "M", "F", "M", "F", "M", "M", "M", "M",
"M", "M", "F", "F")
friends1_nodes <- tibble(name, gender)
# Create an igraph object with attributes directly from dataframes
g1 <- graph_from_data_frame(d = friends1_edges, vertices = friends1_nodes, directed = FALSE)
# Subset edges greater than or equal to 5 hours
E(g1)[[hours >= 5]]
# Set vertex color by gender
# "orange" for females and "dodgerblue" for males
V(g1)$color <- ifelse(V(g1)$gender == "F", "orange", "dodgerblue")
# Plot the graph
plot(g1, vertex.label.color = "black")
# Plot the graph object g1 in a circle layout
plot(g1, vertex.label.color = "black", layout = layout_in_circle(g1))
# Plot the graph object g1 in a Fruchterman-Reingold layout
plot(g1, vertex.label.color = "black", layout = layout_with_fr(g1))
# Plot the graph object g1 in a Tree layout
m <- layout_as_tree(g1)
plot(g1, vertex.label.color = "black", layout = m)
# Plot the graph object g1 using igraph's chosen layout
m1 <- layout_nicely(g1)
plot(g1, vertex.label.color = "black", layout = m1)
# Create a vector of weights based on the number of hours each pair spend together
w1 <- E(g1)$hours
# Plot the network varying edges by weights
m1 <- layout_nicely(g1)
plot(g1,
vertex.label.color = "black",
edge.color = 'black',
edge.width = w1,
layout = m1)
g1
setwd("E:/JS/Courses/Analyzing Networks with R/Network Science in R - A Tidy Approach/madrid-bombing-terrorist-network")
# Load packages
library(tidyverse)
library(igraph)
library(ggraph)
# Read the nodes file into the variable nodes
nodes <- read_csv("data/nodes.csv")
# Read the ties file into the variable ties
ties <- read_csv("data/ties.csv")
# Print nodes
nodes # 64 nodes
# Print ties
ties # 243 ties
# Make the network from the data frame ties and print it
g <- graph_from_data_frame(ties, directed = FALSE, vertices = nodes)
g
# Make the network from the data frame ties and print it
g <- graph_from_data_frame(ties, directed = FALSE, vertices = nodes)
g
# Print the number of nodes
V(g)
# Explore the set of ties
E(g)
vcount(g)
# Print the number of ties
ecount(g)
# Give the name "Madrid network" to the network
g$name <- "Madrid network"
g$name
# Add node attribute id and print the node `id` attribute
V(g)$id <- seq(1, vcount(g))
V(g)$id
# Print the tie `weight` attribute
E(g)$weight
# Visualize the network with the Kamada-Kawai layout
ggraph(g, layout = "with_kk") +
# Add an edge link geometry mapping transparency to weight
geom_edge_link(aes(alpha = weight)) +
# Add a node point geometry
geom_node_point() +
# Add a node text geometry, mapping label to id and repelling
geom_node_text(aes(label = id), repel = TRUE)
# Visualize the network in a circular layout
ggraph(g, layout = "in_circle") +
# Map tie transparency to its weight
geom_edge_link(aes(alpha = weight)) +
geom_node_point()
# Visualize the network with the Kamada-Kawai layout
ggraph(g, layout = "with_kk") +
# Add an edge link geometry mapping transparency to weight
geom_edge_link(aes(alpha = weight)) +
# Add a node point geometry
geom_node_point() +
# Add a node text geometry, mapping label to id and repelling
geom_node_text(aes(label = id), repel = TRUE)
# Visualize the network in a circular layout
ggraph(g, layout = "in_circle") +
# Map tie transparency to its weight
geom_edge_link(aes(alpha = weight)) +
geom_node_point()
# Visualize the network in a gird layout
ggraph(g, layout = "on_grid") +
# Map tie transparency to its weight
geom_edge_link(aes(alpha = weight)) +
geom_node_point()
nodes_with_centrality <- nodes %>%
# Add a column containing the degree of each node
mutate(degree = degree(g)) %>%
# Arrange rows by descending degree
arrange(desc(degree))
# See the result
nodes_with_centrality
nodes_with_centrality <- nodes %>%
mutate(
degree = degree(g),
# Add a column containing the strength of each node
strength = strength(g)
) %>%
# Arrange rows by descending strength
arrange(desc(strength))
# See the result
nodes_with_centrality
nodes_with_centrality <- nodes %>%
mutate(
degree = degree(g),
# Add a column containing the strength of each node
strength = strength(g),
betweenness = betweenness(g),
closeness = closeness(g)
) %>%
# Arrange rows by descending strength
arrange(desc(closeness))
# See the result
nodes_with_centrality
# Calculate the reciprocal of the tie weights
dist_weight <- 1 / E(g)$weight
ties_with_betweenness <- ties %>%
# Add an edge betweenness column weighted by dist_weight
mutate(betweenness = edge_betweenness(g, weights = dist_weight))
# Review updated ties
ties_with_betweenness
ties_joined <- ties_with_betweenness %>%
left_join(nodes, by = c("from" = "id")) %>%
left_join(nodes, by = c("to" = "id"))
# Select only relevant variables
ties_selected <- ties_joined %>%
select(from, to, name_from = name.x, name_to = name.y, betweenness)
# See the result
ties_selected
ties_selected %>%
# Arrange rows by descending betweenness
arrange(desc(betweenness))
tie_counts_by_weight <- ties %>%
# Count the number of rows with each weight
count(weight) %>%
# Add a column of the percentage of rows with each weight
mutate(percentage = 100 * n / nrow(ties))
# See the result
tie_counts_by_weight
# Make is_weak TRUE whenever the tie is weak
is_weak <- E(g)$weight == 1
# Check that the number of weak ties is the same as before
sum(is_weak)
ggraph(g, layout = "with_kk") +
# Add an edge link geom, mapping color to is_weak
geom_edge_link(aes(color = is_weak))
ggraph(g, layout = "with_kk") +
# Map filter to is_weak
geom_edge_link(aes(filter = is_weak), alpha = 0.5)
# From previous steps
ties_swapped <- ties %>%
mutate(temp = to, to = from, from = temp) %>%
select(-temp)
ties_bound <- bind_rows(ties, ties_swapped)
# Using ties_bound, plot to vs. from, filled by weight
ggplot(ties_bound, aes(x = from, y = to, fill = factor(weight))) +
# Add a raster geom
geom_raster() +
# Label the color scale as "weight"
labs(fill = "weight")
# Get the weighted adjacency matrix
A <- as_adjacency_matrix(g, attr = "weight", names = FALSE)
# See the results
A
g
as_agency_matrix(g)
# print sim_tib
sim_tib
# build weighted similarity network and save to h
h <- graph_from_adjacency_matrix(S, mode = "undirected", weighted = TRUE)
S
g
g1
g
# Convert from igraph to visNetwork
data <- toVisNetworkData(g)
install.packages("visNetwork")
# Load visNetwork
library(visNetwork)
# Convert from igraph to visNetwork
data <- toVisNetworkData(g)
# Print the head of the data nodes
head(data$nodes)
# ... do the same for the edges (ties)
head(data$edges)
# Visualize the network
visNetwork(nodes = data$nodes, edges = data$edges, width = 300, height = 300)
# Visualize the network
visNetwork(nodes = data$nodes, edges = data$edges)
# See a list of possible layouts
ls("package:igraph", pattern = "^layout_.")
visNetwork(nodes = data$nodes, edges = data$edges) %>%
# Change the layout to be on a grid
visIgraphLayout(layout = "layout_with_kk")
visNetwork(nodes = data$nodes, edges = data$edges) %>%
# Change the layout to be KK
visIgraphLayout(layout = "layout_with_kk") %>%
# Change the options to highlight the nearest nodes and ties
visOptions(highlightNearest = TRUE)
head(data$edges)
?visNetwork
visNetwork(nodes = data$nodes, edges = data$edges) %>%
# Change the layout to be KK
visIgraphLayout(layout = "layout_with_kk") %>%
# Change the options to highlight the nearest nodes and ties
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE)
